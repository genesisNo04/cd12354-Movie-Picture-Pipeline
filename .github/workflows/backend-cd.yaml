name: 'Backend Continuous Deployment'
on:
  workflow_dispatch:

  pull_request:
    branches:
      - main

jobs:
  lint-job:
    name: 'Lint Job'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        run: |
          cd ./starter/backend
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      - name: Run lint check
        run: cd ./starter/backend && pipenv run lint

  test-job:
    name: 'Test Job'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        run: |
          cd ./starter/backend
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install pytest --dev
          pipenv install --dev

      - name: Run tests
        run: |
          cd ./starter/backend 
          pipenv run test
        
  build:
    needs: [lint-job, test-job]
    runs-on: ubuntu-latest 

    steps:
      - name: checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Build Docker image
        run: |
          cd ./starter/backend
          docker build -t backend .
      
      - name: Tag Docker Image
        run: |
          cd ./starter/backend
          docker tag backend:latest ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      - name: Push Docker image to ECR
        run: |
          cd ./starter/backend
          docker push ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest
      
      - name: Kubeconfig Auth
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1

      # - name: Deploy to Kubernetes
      #   run: |
      #     cd ./starter/backend/k8s
      #     kubectl apply -f deployment.yml

